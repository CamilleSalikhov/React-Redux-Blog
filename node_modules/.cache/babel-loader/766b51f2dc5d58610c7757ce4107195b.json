{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\camille\\\\Desktop\\\\Proga\\\\react_redux_blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { combineReducers } from 'redux'; //types\n\nconst FETCH_POST = 'FETCH_POST';\nconst NEW_POST = 'NEW_POST'; //actions\n\nconst fetchPosts = dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/posts').then(res => res.json()).then(data => dispatch({\n    type: FETCH_POST,\n    load: data\n  }));\n}; //postReducer\n\n\nconst inititalState = {\n  items: [],\n  item: {}\n};\n\nconst postReducer = (state = inititalState, action) => {\n  switch (action.type) {\n    case FETCH_POST:\n      return _objectSpread({}, state, {\n        items: action.load\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst middleware = [thunk];\nconst store = createStore(rootReducer, inititalState, applyMiddleware(...middleware));\n\nconst rootReducer = inititalState => {\n  return {};\n};\n\ncombineReducers({\n  posts: postReducer\n}); //exporting\n\nexport { store };\nexport { fetchPosts };","map":{"version":3,"sources":["C:\\Users\\camille\\Desktop\\Proga\\react_redux_blog\\src\\ReduxStuff.js"],"names":["createStore","applyMiddleware","thunk","combineReducers","FETCH_POST","NEW_POST","fetchPosts","dispatch","fetch","then","res","json","data","type","load","inititalState","items","item","postReducer","state","action","middleware","store","rootReducer","posts"],"mappings":";AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,eAAR,QAA8B,OAA9B,C,CAEA;;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,QAAQ,GAAG,UAAjB,C,CACA;;AACA,MAAMC,UAAU,GAAIC,QAAD,IAAc;AAC7BC,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAIL,QAAQ,CAAC;AACnBM,IAAAA,IAAI,EAAET,UADa;AAEnBU,IAAAA,IAAI,EAAEF;AAFa,GAAD,CAFtB;AAMH,CAPD,C,CASA;;;AACA,MAAMG,aAAa,GAAG;AAClBC,EAAAA,KAAK,EAAC,EADY;AAElBC,EAAAA,IAAI,EAAE;AAFY,CAAtB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAACJ,aAAP,EAAsBK,MAAtB,KAAiC;AACjD,UAAOA,MAAM,CAACP,IAAd;AACI,SAAKT,UAAL;AACI,+BACOe,KADP;AAEIH,QAAAA,KAAK,EAACI,MAAM,CAACN;AAFjB;;AAIJ;AACI,aAAOK,KAAP;AAPR;AASH,CAVD;;AAcA,MAAME,UAAU,GAAG,CAACnB,KAAD,CAAnB;AAEA,MAAMoB,KAAK,GAAGtB,WAAW,CAACuB,WAAD,EAAaR,aAAb,EAA2Bd,eAAe,CAAC,GAAGoB,UAAJ,CAA1C,CAAzB;;AAEA,MAAME,WAAW,GAAIR,aAAD,IAAmB;AACnC,SAAO,EAAP;AACH,CAFD;;AAIAZ,eAAe,CACX;AAACqB,EAAAA,KAAK,EAAEN;AAAR,CADW,CAAf,C,CAOA;;AACA,SAAQI,KAAR;AACA,SAAQhB,UAAR","sourcesContent":["import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {combineReducers} from 'redux';\r\n\r\n//types\r\nconst FETCH_POST = 'FETCH_POST';\r\nconst NEW_POST = 'NEW_POST';\r\n//actions\r\nconst fetchPosts = (dispatch) => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n    .then(res => res.json())\r\n    .then(data => dispatch({\r\n        type: FETCH_POST,\r\n        load: data\r\n    }));\r\n}\r\n\r\n//postReducer\r\nconst inititalState = {\r\n    items:[],\r\n    item: {}\r\n};\r\n\r\nconst postReducer = (state=inititalState, action) => {\r\n    switch(action.type) {\r\n        case FETCH_POST:\r\n            return {\r\n                ...state,\r\n                items:action.load\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer,inititalState,applyMiddleware(...middleware));\r\n\r\nconst rootReducer = (inititalState) => {\r\n    return {}\r\n}\r\n\r\ncombineReducers(\r\n    {posts: postReducer}\r\n);\r\n\r\n\r\n\r\n\r\n//exporting\r\nexport {store};\r\nexport {fetchPosts};"]},"metadata":{},"sourceType":"module"}