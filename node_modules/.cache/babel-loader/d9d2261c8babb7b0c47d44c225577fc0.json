{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\camille\\\\Desktop\\\\Proga\\\\react_redux_blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { combineReducers } from 'redux'; //types\n\nconst FETCH_POST = 'FETCH_POST';\nconst NEW_POST = 'NEW_POST'; //actions\n\nconst fetchPosts = () => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/posts').then(res => res.json()).then(data => dispatch({\n    type: FETCH_POST,\n    load: data\n  }));\n}; //postReducer\n\n\nconst inititalState = {\n  items: [],\n  item: {}\n};\n\nconst postReducer = (state = inititalState, action) => {\n  switch (action.type) {\n    case FETCH_POST:\n      return _objectSpread({}, state, {\n        items: action.load\n      });\n\n    default:\n      return state;\n  }\n}; //combine all reducers\n\n\nconst rootReducer = combineReducers({\n  posts: postReducer\n}); //creating a store\n\nconst middleware = [thunk];\nconst store = createStore(rootReducer, {}, applyMiddleware(...middleware)); //exporting\n\nexport { store };\nexport { fetchPosts };","map":{"version":3,"sources":["C:\\Users\\camille\\Desktop\\Proga\\react_redux_blog\\src\\ReduxStuff.js"],"names":["createStore","applyMiddleware","thunk","combineReducers","FETCH_POST","NEW_POST","fetchPosts","dispatch","fetch","then","res","json","data","type","load","inititalState","items","item","postReducer","state","action","rootReducer","posts","middleware","store"],"mappings":";AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,eAAR,QAA8B,OAA9B,C,CAEA;;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,QAAQ,GAAG,UAAjB,C,CACA;;AACA,MAAMC,UAAU,GAAG,MAAKC,QAAQ,IAAI;AAEhCC,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAIL,QAAQ,CAAC;AACnBM,IAAAA,IAAI,EAAET,UADa;AAEnBU,IAAAA,IAAI,EAAEF;AAFa,GAAD,CAFtB;AAMH,CARD,C,CAUA;;;AACA,MAAMG,aAAa,GAAG;AAClBC,EAAAA,KAAK,EAAC,EADY;AAElBC,EAAAA,IAAI,EAAE;AAFY,CAAtB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAACJ,aAAP,EAAsBK,MAAtB,KAAiC;AACjD,UAAOA,MAAM,CAACP,IAAd;AACI,SAAKT,UAAL;AACI,+BACOe,KADP;AAEIH,QAAAA,KAAK,EAACI,MAAM,CAACN;AAFjB;;AAIJ;AACI,aAAOK,KAAP;AAPR;AASH,CAVD,C,CAaA;;;AACA,MAAME,WAAW,GAAGlB,eAAe,CAC/B;AAACmB,EAAAA,KAAK,EAAEJ;AAAR,CAD+B,CAAnC,C,CAGA;;AACA,MAAMK,UAAU,GAAG,CAACrB,KAAD,CAAnB;AACA,MAAMsB,KAAK,GAAGxB,WAAW,CAACqB,WAAD,EAAa,EAAb,EAAgBpB,eAAe,CAAC,GAAGsB,UAAJ,CAA/B,CAAzB,C,CASA;;AACA,SAAQC,KAAR;AACA,SAAQlB,UAAR","sourcesContent":["import {createStore, applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {combineReducers} from 'redux';\r\n\r\n//types\r\nconst FETCH_POST = 'FETCH_POST';\r\nconst NEW_POST = 'NEW_POST';\r\n//actions\r\nconst fetchPosts = () =>dispatch => {\r\n     \r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n    .then(res => res.json())\r\n    .then(data => dispatch({\r\n        type: FETCH_POST,\r\n        load: data\r\n    }));\r\n}\r\n\r\n//postReducer\r\nconst inititalState = {\r\n    items:[],\r\n    item: {}\r\n};\r\n\r\nconst postReducer = (state=inititalState, action) => {\r\n    switch(action.type) {\r\n        case FETCH_POST:\r\n            return {\r\n                ...state,\r\n                items:action.load\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n//combine all reducers\r\nconst rootReducer = combineReducers(\r\n    {posts: postReducer}\r\n);\r\n//creating a store\r\nconst middleware = [thunk];\r\nconst store = createStore(rootReducer,{},applyMiddleware(...middleware));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//exporting\r\nexport {store};\r\nexport {fetchPosts};"]},"metadata":{},"sourceType":"module"}