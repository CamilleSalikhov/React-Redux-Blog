{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\camille\\\\Desktop\\\\Proga\\\\react_redux_blog\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { combineReducers } from 'redux'; //types\n\nconst FETCH_POST = 'FETCH_POST';\nconst NEW_POST = 'NEW_POST'; //actions\n\nconst fetchPosts = () => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/posts').then(res => res.json()).then(data => dispatch({\n    type: FETCH_POST,\n    load: data\n  }));\n};\n\nconst createPosts = postData => dispatch => {\n  console.log('action called');\n  fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify(postData)\n  }).then(res => res.json()).then(post => dispatch({\n    type: NEW_POST,\n    load: post\n  }));\n}; //postReducer\n\n\nconst inititalState = {\n  items: [],\n  item: {}\n};\n\nconst postReducer = (state = inititalState, action) => {\n  switch (action.type) {\n    case FETCH_POST:\n      return _objectSpread({}, state, {\n        items: action.load\n      });\n\n    case NEW_POST:\n      return _objectSpread({}, state, {\n        item: action.load\n      });\n\n    default:\n      return state;\n  }\n}; //combine all reducers\n\n\nconst rootReducer = combineReducers({\n  posts: postReducer\n}); //creating a store\n\nconst middleware = [thunk];\nconst store = createStore(rootReducer, {}, compose(applyMiddleware(...middleware), window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())); //exporting\n\nexport { store };\nexport { fetchPosts };\nexport { createPosts };","map":{"version":3,"sources":["C:\\Users\\camille\\Desktop\\Proga\\react_redux_blog\\src\\ReduxStuff.js"],"names":["createStore","applyMiddleware","compose","thunk","combineReducers","FETCH_POST","NEW_POST","fetchPosts","dispatch","fetch","then","res","json","data","type","load","createPosts","postData","console","log","method","headers","body","JSON","stringify","post","inititalState","items","item","postReducer","state","action","rootReducer","posts","middleware","store","window","__REDUX_DEVTOOLS_EXTENSION__"],"mappings":";AAAA,SAAQA,WAAR,EAAqBC,eAArB,EAAsCC,OAAtC,QAAoD,OAApD;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,eAAR,QAA8B,OAA9B,C,CAEA;;AACA,MAAMC,UAAU,GAAG,YAAnB;AACA,MAAMC,QAAQ,GAAG,UAAjB,C,CACA;;AACA,MAAMC,UAAU,GAAG,MAAKC,QAAQ,IAAI;AAEhCC,EAAAA,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMG,IAAI,IAAIL,QAAQ,CAAC;AACnBM,IAAAA,IAAI,EAAET,UADa;AAEnBU,IAAAA,IAAI,EAAEF;AAFa,GAAD,CAFtB;AAMH,CARD;;AAWA,MAAMG,WAAW,GAAIC,QAAD,IAAaT,QAAQ,IAAI;AACzCU,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAV,EAAAA,KAAK,CAAC,4CAAD,EAA+C;AAChDW,IAAAA,MAAM,EAAC,MADyC;AAEhDC,IAAAA,OAAO,EAAE;AACL,sBAAiB;AADZ,KAFuC;AAKhDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,QAAf;AAL0C,GAA/C,CAAL,CAOCP,IAPD,CAOMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPb,EAQCF,IARD,CAQMe,IAAI,IAAIjB,QAAQ,CAAC;AACnBM,IAAAA,IAAI,EAACR,QADc;AAEnBS,IAAAA,IAAI,EAACU;AAFc,GAAD,CARtB;AAYH,CAdD,C,CAiBA;;;AACA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,KAAK,EAAC,EADY;AAElBC,EAAAA,IAAI,EAAE;AAFY,CAAtB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAACJ,aAAP,EAAsBK,MAAtB,KAAiC;AACjD,UAAOA,MAAM,CAACjB,IAAd;AACI,SAAKT,UAAL;AACI,+BACOyB,KADP;AAEIH,QAAAA,KAAK,EAACI,MAAM,CAAChB;AAFjB;;AAIJ,SAAKT,QAAL;AACQ,+BACOwB,KADP;AAEIF,QAAAA,IAAI,EAACG,MAAM,CAAChB;AAFhB;;AAIR;AACI,aAAOe,KAAP;AAZR;AAcH,CAfD,C,CAkBA;;;AACA,MAAME,WAAW,GAAG5B,eAAe,CAC/B;AAAC6B,EAAAA,KAAK,EAAEJ;AAAR,CAD+B,CAAnC,C,CAGA;;AACA,MAAMK,UAAU,GAAG,CAAC/B,KAAD,CAAnB;AACA,MAAMgC,KAAK,GAAGnC,WAAW,CAACgC,WAAD,EAAa,EAAb,EAAgB9B,OAAO,CAC5CD,eAAe,CAAC,GAAGiC,UAAJ,CAD6B,EAE5CE,MAAM,CAACC,4BAAP,IAAuCD,MAAM,CAACC,4BAAP,EAFK,CAAvB,CAAzB,C,CAaA;;AACA,SAAQF,KAAR;AACA,SAAQ5B,UAAR;AACA,SAAQS,WAAR","sourcesContent":["import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {combineReducers} from 'redux';\r\n\r\n//types\r\nconst FETCH_POST = 'FETCH_POST';\r\nconst NEW_POST = 'NEW_POST';\r\n//actions\r\nconst fetchPosts = () =>dispatch => {\r\n     \r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n    .then(res => res.json())\r\n    .then(data => dispatch({\r\n        type: FETCH_POST,\r\n        load: data\r\n    }));\r\n}\r\n\r\n\r\nconst createPosts = (postData) =>dispatch => {\r\n    console.log('action called');\r\n    fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method:'POST',\r\n        headers: {\r\n            'content-type' : 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n    .then(res => res.json())\r\n    .then(post => dispatch({\r\n        type:NEW_POST,\r\n        load:post\r\n    }));\r\n}\r\n\r\n\r\n//postReducer\r\nconst inititalState = {\r\n    items:[],\r\n    item: {}\r\n};\r\n\r\nconst postReducer = (state=inititalState, action) => {\r\n    switch(action.type) {\r\n        case FETCH_POST:\r\n            return {\r\n                ...state,\r\n                items:action.load\r\n            }\r\n        case NEW_POST:\r\n                return {\r\n                    ...state,\r\n                    item:action.load\r\n                }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n//combine all reducers\r\nconst rootReducer = combineReducers(\r\n    {posts: postReducer}\r\n);\r\n//creating a store\r\nconst middleware = [thunk];\r\nconst store = createStore(rootReducer,{},compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    \r\n    ));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//exporting\r\nexport {store};\r\nexport {fetchPosts};\r\nexport {createPosts}"]},"metadata":{},"sourceType":"module"}